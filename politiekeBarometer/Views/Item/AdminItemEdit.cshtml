@model politiekeBarometer.Models.ItemCreateViewModel

@{
    Layout = Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Edit Item</title>
</head>
<body>
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Wijzig item</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>
           
            <div class="form-group">
                @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                </div>
            </div>

            @if (Model.Type == "Persoon")
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.SelectedOrganizationId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(m => m.SelectedOrganizationId, Model.Organizations,"")
                    </div>
                </div>
            }

            @if (Model.Type == "Persoon" || Model.Type == "Organisatie")
            {

                if (Model.ProfileIds.Count != 0)
                {
                    @Html.HiddenFor(m => m.ProfileIds, new { Value = Model.ProfileIds[0] })
                }

                <div class="form-group">
                    @Html.LabelFor(model => model.TwitterUrl, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        &#64 @Html.EditorFor(model => model.TwitterUrl, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TwitterUrl, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
           
            @if (Model.Type == "Thema")
            {
                <div class="form-group" id="keyword">
                    @Html.LabelFor(model => model.SelectedKeywords, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                            @Html.ListBoxFor(model => model.SelectedKeywords, Model.ListKeywords)
                    </div>
                </div>

                <div class="form-group" id="keyword">
                    @Html.LabelFor(model => model.StringKeywords, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.StringKeywords, new { htmlAttributes = new { placeholder = "Woorden splitsen door komma", @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.StringKeywords, "", new { @class = "text-danger" })
                    </div>
                </div>
            }

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Terug naar lijst", "AdminItemIndex")
    </div>
</body>
</html>
