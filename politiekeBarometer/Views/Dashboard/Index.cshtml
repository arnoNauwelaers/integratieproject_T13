@*@model IEnumerable<BL.Domain.ApplicationUser>*@

@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .grafiek {
        background-color: #ecedee;
        color: black;
        font-size: 20px;
        font-family: sans-serif;
        border-radius: 8px;
        padding: 20px;
        margin: 30px 20px;
        width: 120px;
        /* This makes things *much* easier */
        box-sizing: border-box;
    }

    .resize-container {
        display: inline-block;
        width: 100%;
        height: 250%;
    }

    #dashboardTitle {
        display: inline-block;
    }

</style>

<h2 id="dashboardTitle">Dashboard</h2>
<button id="editButton" type="button" class="btn btn-primary btn-lg" style="margin-left:100px;">Edit</button>



<div class="resize-container">
    <div value="1" class="grafiek resize-drag">
        Resize from any edge or corner
    </div>
    @foreach (Chart chart in Model.Dashboard)
    {
        //TODO hier code om elke chart in te laden op juiste positie en grootte
        <div value="@*@chart.ChartId*@" class="grafiek resize-drag">
            Resize from any edge or corner
        </div>
    }
</div>
<script src="~/Scripts/interact.min.js"></script>
<script src="~/Scripts/jquery.min.js"></script>
<script>
    //alles met klasse .resize-drag kan gesleept en vergroot worden
    interact('.resize-drag')
        .draggable({
            // enable inertial throwing
            inertia: true,
            // keep the element within the area of it's parent
            restrict: {
                restriction: "parent",
                endOnly: true,
                elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
            },
            // enable autoScroll
            autoScroll: true,

            // call this function on every dragmove event
            onmove: dragMoveListener,
            // call this function on every dragend event
            onend: function (event) {
                var textEl = event.target.querySelector('p');

                textEl && (textEl.textContent =
                    'moved a distance of '
                    + (Math.sqrt(Math.pow(event.pageX - event.x0, 2) +
                        Math.pow(event.pageY - event.y0, 2) | 0))
                        .toFixed(2) + 'px');
            }
        });

    function dragMoveListener(event) {
        var target = event.target,
            // keep the dragged position in the data-x/data-y attributes
            x = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx,
            y = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;

        // translate the element
        target.style.webkitTransform =
            target.style.transform =
            'translate(' + x + 'px, ' + y + 'px)';

        // update the posiion attributes
        target.setAttribute('data-x', x);
        target.setAttribute('data-y', y);
    }

    // this is used later in the resizing and gesture demos
    window.dragMoveListener = dragMoveListener;


    interact('.resize-drag')
        .draggable({
            onmove: window.dragMoveListener,
            restrict: {
                restriction: 'parent',
                elementRect: { top: 0, left: 0, bottom: 1, right: 1 }
            },
        })
        .resizable({
            // resize from all edges and corners
            edges: { left: true, right: true, bottom: true, top: true },

            // keep the edges inside the parent
            restrictEdges: {
                outer: 'parent',
                endOnly: true,
            },

            // minimum size
            restrictSize: {
                min: { width: 100, height: 50 },
            },

            inertia: true,
        })
        .on('resizemove', function (event) {
            var target = event.target,
                x = (parseFloat(target.getAttribute('data-x')) || 0),
                y = (parseFloat(target.getAttribute('data-y')) || 0);

            // update the element's style
            target.style.width = event.rect.width + 'px';
            target.style.height = event.rect.height + 'px';

            // translate when resizing from top or left edges
            x += event.deltaRect.left;
            y += event.deltaRect.top;

            target.style.webkitTransform = target.style.transform =
                'translate(' + x + 'px,' + y + 'px)';

            target.setAttribute('data-x', x);
            target.setAttribute('data-y', y);
            target.textContent = Math.round(event.rect.width) + '\u00D7' + Math.round(event.rect.height);
        });
    $(".grafiek").removeClass("resize-drag");
    $("#editButton").click(function () {
        if ($("#editButton").hasClass("btn-success")) {
            $(".grafiek").removeClass("resize-drag");
            $("#editButton").addClass("btn-primary");
            $("#editButton").removeClass("btn-success");
            $("#editButton").html("Edit");
            SaveCharts();
        }
        else {
            $(".grafiek").addClass("resize-drag");
            $("#editButton").removeClass("btn-primary");
            $("#editButton").addClass("btn-success");
            $("#editButton").html("Save");
        }
    });

    function SaveCharts() {
        var text = '{ "charts" : [';
        var teller = 0;
        $(".grafiek").each(function (index) {
            teller++;
            var id = $(this).attr("value");
            var X = $(this).attr("data-x");
            var Y = $(this).attr("data-y");
            if (X == null) {
                X = 0;
                Y = 0;
            }
            var Height = $(this).height();
            var Width = $(this).width();
            if (!teller == 1) {
                text += ',';
            }
            text += '{ "Id":"' + id + '" , "X":"' + X + '" , "Y":"' + Y + '" , "Height":"' + Height + '" , "Width":"' + Width + '" }';
            $(".grafiek")
        })
        text += ']}';

        var obj = JSON.parse(text);
        $.post("/api/Basic/EditChart", { json: obj });
    }
    
</script>